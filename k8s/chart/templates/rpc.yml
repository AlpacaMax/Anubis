apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipeline-rpc
  namespace: {{ .Release.Namespace }}
  labels:
    component: pipeline-rpc
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc-default
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: rpc-default
    component: rpc-default
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rpc-default
      component: rpc-default
  replicas: {{ .Values.rpc.default.replicas }}
  {{- if .Values.rollingUpdates }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rpc-default
        component: rpc-default
    spec:
      serviceAccountName: pipeline-rpc
      dnsPolicy: ClusterFirst
      containers:
      - name: anubis-rpc-default
        image: {{ .Values.api.image }}:{{ .Values.api.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["./rq-worker.sh", "default"]
        env:
        - name: "DEBUG"
          value: {{- if .Values.debug }} "1"{{- else }} "0"{{- end }}
        - name: "JOB"
          value: "1"
        - name: "IMAGE_PULL_POLICY"
          value: {{ .Values.imagePullPolicy }}
        # sqlalchemy uri
        - name: "DATABASE_URI"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        - name: "REDIS_PASS"
          valueFrom:
            secretKeyRef:
              name: api
              key: redis-password
        - name: "SECRET_KEY"
          valueFrom:
            secretKeyRef:
              name: api
              key: secret-key

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc-theia
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: rpc-theia
    component: rpc-theia
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rpc-theia
      component: rpc-theia
  replicas: {{ .Values.rpc.theia.replicas }}
  {{- if .Values.rollingUpdates }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rpc-theia
        component: rpc-theia
    spec:
      serviceAccountName: pipeline-rpc
      dnsPolicy: ClusterFirst
      containers:
      - name: anubis-rpc-theia
        image: {{ .Values.api.image }}:{{ .Values.api.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["./rq-worker.sh", "theia"]
        env:
        - name: "DEBUG"
          value: {{- if .Values.debug }} "1"{{- else }} "0"{{- end }}
        - name: "JOB"
          value: "1"
        - name: "IMAGE_PULL_POLICY"
          value: {{ .Values.imagePullPolicy }}
        # sqlalchemy uri
        - name: "DATABASE_URI"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        - name: "REDIS_PASS"
          valueFrom:
            secretKeyRef:
              name: api
              key: redis-password
        - name: "SECRET_KEY"
          valueFrom:
            secretKeyRef:
              name: api
              key: secret-key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc-regrade
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: rpc-regrade
    component: rpc-regrade
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rpc-regrade
      component: rpc-regrade
  replicas: {{ .Values.rpc.regrade.replicas }}
  {{- if .Values.rollingUpdates }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rpc-regrade
        component: rpc-regrade
    spec:
      serviceAccountName: pipeline-rpc
      dnsPolicy: ClusterFirst
      containers:
      - name: anubis-rpc-regrade
        image: {{ .Values.api.image }}:{{ .Values.api.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["./rq-worker.sh", "regrade"]
        env:
        - name: "DEBUG"
          value: {{- if .Values.debug }} "1"{{- else }} "0"{{- end }}
        - name: "JOB"
          value: "1"
        - name: "IMAGE_PULL_POLICY"
          value: {{ .Values.imagePullPolicy }}
        # sqlalchemy uri
        - name: "DATABASE_URI"
          valueFrom:
            secretKeyRef:
              name: api
              key: database-uri
        - name: "REDIS_PASS"
          valueFrom:
            secretKeyRef:
              name: api
              key: redis-password
        - name: "SECRET_KEY"
          valueFrom:
            secretKeyRef:
              name: api
              key: secret-key
---
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pipeline-create-jobs
  namespace: {{ .Release.Namespace }}
  labels:
    rbac.authorization.k8s.io/pipeline-create-jobs: "true"
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
rules:
- apiGroups: ["batch", "extensions"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["pods", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "delete", "deletecollection"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pipeline-create-jobs
  namespace: {{ .Release.Namespace }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pipeline-create-jobs
subjects:
  - kind: ServiceAccount
    name: pipeline-rpc
    namespace: anubis
