## Logstash
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: {{ .Release.Namespace }}
  labels:
    app: logstash
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
        ecosystem: elk
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:7.8.0
        imagePullPolicy: Always
        ports:
        - name: web
          containerPort: 5000
        - name: api
          containerPort: 9600
        volumeMounts:
        - name: config
          mountPath: "/usr/share/logstash/pipeline/"
          readOnly: true

      volumes:
      # You set volumes at the Pod level, then mount them into containers inside that Pod
      - name: config
        configMap:
          # Provide the name of the ConfigMap you want to mount.
          name: logstash
          # An array of keys from the ConfigMap to create as files
          items:
          - key: "logstash.conf"
            path: "logstash.conf"
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: {{ .Release.Namespace }}
  labels:
    app: logstash
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    app: logstash
  ports:
  - name: logstash
    protocol: UDP
    port: 5000
    targetPort: 5000
  - name: api
    port: 9600
    targetPort: 9600

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash
  namespace: {{ .Release.Namespace }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
data:
  logstash.conf: |
    input {
      udp {
        port => 5000
        codec => json
      }
    }
    output {
      elasticsearch {
        hosts => ["{{ .Values.elasticsearch.service }}:9200"]
      }
    }
